extends MarginContainer

# ---- consulta sql ----
var path
var consulta
var sql = SQLite.new();
#-------------

export var DB_name = "sentenceshome"
export var Table_name = "sentenceshome"
export var SQL_param = ""
export var DB_ext = ".db"
export var Id_Ref = "id"
export var ORDER_BY = "id ASC"
export var csv_to_SQLite_ACTIVE = 1
export var Show_ProgressBar = 1
export var priority_control = 1
export var set_ini = 1



var sentence_question = ""
var sentence_trivie = ""
var sentence_options = ""
var sentence_pronunc = ""
var sentence_string = []
var array_word_options = []
var Word_button = null
var ID = 0
var ID_Item = 0
var total_report = []


var player_path = ""
onready var player_sound = get_node("AudioStreamPlayer") 
onready var title = get_node("VBoxContainer/Label_post/Label_post")
onready var question = get_node("VBoxContainer/Question")
onready var image = get_node("VBoxContainer/Image/TextureRect") 
onready var answer_verify = get_node("VBoxContainer/Word_interaction/Answer_verify/Label_post")



# datos de la partida | solo ref. estan en global
var user_game_name = 0
var user_correct_answer = 0
var user_incorrect_answer = []
var user_game_time = 0


func _player_sound(track,vol):
	player_path = "res://scn/pages/english_trivie/elements/sound/"
	player_sound.set_stream(load(player_path+track+".ogg"))
	player_sound.set_volume_db(vol)
	player_sound.play(0)


func _ready():
	add_to_group("click_awesome")
	add_to_group("trivie_control")

	set_process(1)

	_player_sound("notific",5)
	
	
	# carga datos de DB que asigna el boton
	if get_node("/root/FuncApp").SQL_DB_NAME != "":
		DB_name = get_node("/root/FuncApp").SQL_DB_NAME
	#	get_node("/root/FuncApp").SQL_DB_NAME = ""
		
	if get_node("/root/FuncApp").SQL_TABLE_NAME != "":
		Table_name = get_node("/root/FuncApp").SQL_TABLE_NAME
	#	get_node("/root/FuncApp").SQL_TABLE_NAME = ""
	
	
	var DB = get_node("VBoxContainer/DB_control")
	DB.DB_name = DB_name
	DB.Table_name = Table_name
	DB.SQL_param = SQL_param
	DB.DB_ext = DB_ext
	DB.Id_Ref = Id_Ref
	DB.ORDER_BY = ORDER_BY
	DB.csv_to_SQLite_ACTIVE = csv_to_SQLite_ACTIVE
	DB.Show_ProgressBar = Show_ProgressBar
	DB.priority_control = priority_control
	DB.set_ini = set_ini
	
	
	title.set_text(str(get_node("/root/Messages").get("loading")))
	title.set_align(1)
	question.hide()
	image.set_texture(load("res://images/assets/buho_1.png"))
	answer_verify.get_parent().hide()
#	get_node("Popup").hide()
	
	
	# datos de usuario para el score board al terminar partida
	get_node("/root/FuncApp").user_game_name = DB_name
	get_node("/root/FuncApp").user_correct_answer = 0 # reinicia conteo
	
	
	
	for progres_bar_game in get_tree().get_nodes_in_group("progres_bar_game"):
		progres_bar_game.hide()
	
	# oculta el boton verificar al inicio
	for btn_normal in get_tree().get_nodes_in_group("btn_normal"):
		if btn_normal.type_btn == "verify_trivie":
			btn_normal.hide()



func _DB_loaded_and_ini(): # de DB_control al terminar la carga
	
	title.set_text(str(get_node("/root/Messages").get("trivie_db_loaded")))
	title.set_align(1)
	image.set_texture(load("res://images/assets/huevo.png"))
	


func _process(delta):
	# agrega las palabras de opciones
	for i in sentence_options.split(" ",0):
		if ID < sentence_options.split(" ",0).size():
			add_word(i)
#		if ID == sentence_options.split(" ",0).size():
#			ID = 0
	
	get_node("Popup/VBoxContainer/timer_count/Label_post").set_text(str(int(get_node("Timer").get_time_left())))


	# tiempo de la partida
	if ID_Item > 0 and ID_Item <= total_report.size() and get_node("Popup").is_hidden() and get_node("VBoxContainer/Word_interaction/Answer_verify").is_hidden():
		get_node("/root/FuncApp").user_game_time += delta
#		print(get_node("/root/FuncApp").user_game_time)


func sql_next_trivie():
	
#	image.get_parent().hide()
	answer_verify.get_parent().hide()
	get_node("Popup").hide()
	get_node("VBoxContainer/Word_interaction/Button_GridContainer/TextureRect").show() 
	
	# mostrar boton verificar
	for btn_normal in get_tree().get_nodes_in_group("btn_normal"):
		if btn_normal.type_btn == "verify_trivie":
			btn_normal.get_node("HBoxContainer/MarginContainer/Button").set_disabled(1)
			btn_normal.get_node("HBoxContainer/title_margin/title").hide()
			btn_normal.show()
	
	
	# muestra barra
	for progres_bar_game in get_tree().get_nodes_in_group("progres_bar_game"):
		progres_bar_game.show()
		
	# ATENCION  sin cargar el path antes no hace consulta | Debe precidir este codigo
	path = (get_node("/root/FuncApp").SQL_DB_PATH)
	if sql.open(path) != sql.SQLITE_OK:
		print("ERR SQL campo report: ", sql.get_errormsg());
	else:
	#	print("ERR: ", sql.get_errormsg());
		pass
	sql.open(path)

	ID_Item += 1
	var table_sql = get_node("/root/FuncApp").SQL_TABLE_NAME
	var TABLE_ITEM_REF = get_node("/root/FuncApp").TABLE_ITEM_REF
	var ORDER_BY_conf = get_node("/root/FuncApp").ORDER_BY
	var SQL_PARAM = get_node("/root/FuncApp").SQL_PARAM
	var WHERE = " WHERE "+TABLE_ITEM_REF+"="
	var List_ID_Item = []

#	print("SELECT * FROM "+table_sql+WHERE+"'"+str(ID_Item)+"' ORDER BY "+ORDER_BY_conf)
	
	
	total_report = sql.fetch_array("SELECT * FROM "+table_sql)
	get_node("/root/FuncApp").total_answer_in_trivie = total_report.size()
	
	if ID_Item <= total_report.size():
			
		for i in sql.fetch_array("SELECT * FROM "+table_sql+WHERE+"'"+str(ID_Item)+"' ORDER BY "+ORDER_BY_conf): # busca un dato por el id en toda la lista
			sentence_question = i["spanish"]
			sentence_trivie = i["english"]
			sentence_options = i["options"]
			sentence_pronunc = i["pronunciation"]
		
			# descripcion sobre la trivia activa
			title.set_text(i["description"])
			
		# asigna la pregunta en el question viewer
		get_node("VBoxContainer/Question/Label_post1/Label_post").set_text(sentence_question)
		set_process(1) # agrega la lista de botones de opciones
		ID = 0
		
		# incrementa barra de progreso
		for progres_bar_game in get_tree().get_nodes_in_group("progres_bar_game"):
			progres_bar_game.total = total_report.size()
			progres_bar_game.level = ID_Item
			progres_bar_game.bar_next_level()
	
	
		get_node("Popup/VBoxContainer/sentence/Label_post").set_text(sentence_question)
		get_node("Popup/VBoxContainer/pronunciation/Label_post").set_text(sentence_pronunc)


	# nivel completo
	if ID_Item > total_report.size():
		for progres_bar_game in get_tree().get_nodes_in_group("progres_bar_game"):
			progres_bar_game.hide()
		
		title.set_text(str(get_node("/root/Messages").get("trivie_finish")))
		title.set_align(1)
		question.hide()
		get_node("VBoxContainer/Word_interaction").hide()
		image.set_texture(load("res://images/assets/buho_1.png"))
		image.get_parent().show()

		for btn_normal in get_tree().get_nodes_in_group("btn_normal"):
			if btn_normal.type_btn == "verify_trivie":
				btn_normal.hide()
			if btn_normal.type_btn == "next_trivie":
				btn_normal.hide()

		_player_sound("fanfarria_corta",1)


		# muestra score board
		for score_board in get_tree().get_nodes_in_group("score_board"):
			score_board._set_scoreboard()
		get_node("VBoxContainer/Score_board").set_custom_minimum_size(Vector2(self.get_size().x,get_viewport_rect().size.y/2))
		get_node("VBoxContainer/Score_board").show()
		ID_Item = 0
		
		

func add_word(i):
	Word_button = get_node("/root/FuncApp").Word_button.instance()
	var grid = get_node("VBoxContainer/Word_interaction/Button_Grid_options/ScrollContainer/GridContainer")
	
	Word_button.type = "option"
	Word_button.set_text(i)
	grid.add_child(Word_button)
	ID += 1
#	print(i)
	
	for set_high in get_tree().get_nodes_in_group("button_grid_container"):
		set_high.set_process(1)
		pass
	
	
func _verific():
	
		# ocultar boton verificar al presionarlo
		for btn_normal in get_tree().get_nodes_in_group("btn_normal"):
			if btn_normal.type_btn == "verify_trivie":
				btn_normal.get_node("HBoxContainer/MarginContainer/Button").set_disabled(1)
				btn_normal.get_node("HBoxContainer/title_margin/title").hide()
				
		if get_node("VBoxContainer/Word_interaction/Button_GridContainer").type == "word":
			sentence_string = []
			var sentence_grid = get_node("VBoxContainer/Word_interaction/Button_GridContainer/ScrollContainer/GridContainer")
			var sentence_length = sentence_grid.get_child_count()
			
			for words in range(0,sentence_length):
				sentence_string.append(sentence_grid.get_child(words).get_text())

			sentence_string = str(sentence_string).replace("[","").replace("]","").replace(",","")
			print(sentence_trivie,"-",sentence_string)
			
			
			# si es correcto
			if sentence_trivie == sentence_string:
				answer_verify.get_parent().hide()
				get_node("Popup").show()
				get_node("Timer").start()
				_player_sound("bonus_soft",5)
				print("Sentence TRUE")
			
				# datos de usuario para el score board al terminar partida
				get_node("/root/FuncApp").user_correct_answer += 1
			
			# no es correcto
			if sentence_trivie != sentence_string:
				answer_verify.set_text(sentence_trivie)
				answer_verify.get_parent().show()
				_player_sound("juissh",5)
				
				# datos de usuario para el score board al terminar partida
				get_node("/root/FuncApp").user_incorrect_answer.append(ID_Item)
				
				# coloca los botones en rojo | disabled
				for button in get_tree().get_nodes_in_group("word_button"):
					if button.type == "word":
						button.set_disabled(1)
				
				print("Sentence FALSE")
				
			sentence_string = []
			for words in range(0,sentence_length):
				sentence_string.append(sentence_grid.get_child(words).get_text())



func click_awesome(id_mensaje,param):
#	if id_mensaje != "top_bar_volver" and id_mensaje != "pos_scroll_y_all":
#		print(id_mensaje," | param: ",param)


	if id_mensaje == "trivie_control":
		_verific()
		
	if id_mensaje == "add_option":
		Word_button = get_node("/root/FuncApp").Word_button.instance()
		var grid = get_node("VBoxContainer/Word_interaction/Button_GridContainer/ScrollContainer/GridContainer")
		var grid_option = get_node("VBoxContainer/Word_interaction/Button_Grid_options/ScrollContainer/GridContainer").get_children()
		
		if grid.get_children().size() < sentence_trivie.split(" ",0).size():
			Word_button.type = "word"
			Word_button.set_text(param)
			grid.add_child(Word_button)
			sentence_string.append(param)
			_player_sound("notific",5)
		#	print(param)
			
			for set_high in get_tree().get_nodes_in_group("button_grid_container"):
				set_high.set_process(1)
				pass



			# restaurar palabra en las opciones
			var sentence_grid = get_node("VBoxContainer/Word_interaction/Button_GridContainer/ScrollContainer/GridContainer")
			var sentence_length = sentence_grid.get_child_count()
			
		#	for words in range(0,sentence_length):
		#		sentence_string.append(sentence_grid.get_child(words).get_text())
		
	
#			var sentence_grid_opt = get_node("Word_interaction/Button_Grid_options/ScrollContainer/GridContainer")
#			var sentence_length_opt = sentence_grid_opt.get_child_count()
		
#			for words in range(0,sentence_length_opt):
#				array_word_options.append(sentence_grid_opt.get_child(words).get_text())
	
			for option in sentence_string:
				for button in get_tree().get_nodes_in_group("word_button"):
					if button.type == "option":
						button.set_toggle_mode(1)
						if button.get_text() == option:
							button.set_pressed(1)
	#						print(button.get_text())
							
	#		print(sentence_string)
	
	
		if grid.get_children().size() >= sentence_trivie.split(" ",0).size():
			# desactiva las palabras de opciones usadas
			for option in sentence_string:
				for button in get_tree().get_nodes_in_group("word_button"):
					if button.type == "option":
						button.set_toggle_mode(1)
						
						if sentence_string.has(button.get_text()):
						#	if button.get_text() == option:
							button.set_pressed(1)
							
						else:
							button.set_pressed(0)



		# mostrar boton verificar al completar la oracion
		if grid.get_children().size() >= sentence_trivie.split(" ",0).size():
			for btn_normal in get_tree().get_nodes_in_group("btn_normal"):
				if btn_normal.type_btn == "verify_trivie":
					btn_normal.get_node("HBoxContainer/MarginContainer/Button").set_disabled(0)
					btn_normal.get_node("HBoxContainer/title_margin/title").set_text("Revisar")
					btn_normal.get_node("HBoxContainer/title_margin/title").show()
					
			
			
			
	if id_mensaje == "enab_disab_option":
		_player_sound("notific",5)
		
		# rehace la lista de palabras en la respuesta
		sentence_string = []
		var sentence_grid = get_node("VBoxContainer/Word_interaction/Button_GridContainer/ScrollContainer/GridContainer")
		var sentence_length = sentence_grid.get_child_count()
		for words in range(0,sentence_length):
			sentence_string.append(sentence_grid.get_child(words).get_text())

		# desactiva las palabras de opciones usadas
		for option in sentence_string:
			for button in get_tree().get_nodes_in_group("word_button"):
				if button.type == "option":
					button.set_toggle_mode(1)
					
					if sentence_string.has(button.get_text()):
					#	if button.get_text() == option:
						button.set_pressed(1)
						
					else:
						button.set_pressed(0)
						
#		print(sentence_string)


	if id_mensaje == "enab_option":
		_player_sound("lump",5)
		
		# rehace la lista de palabras en la respuesta
		sentence_string = []
		var sentence_grid = get_node("VBoxContainer/Word_interaction/Button_GridContainer/ScrollContainer/GridContainer")
		var sentence_length = sentence_grid.get_child_count()
		
		for words in range(0,sentence_length):
			sentence_string.append(sentence_grid.get_child(words).get_text())

		# desactiva las palabras de opciones usadas
		for option in sentence_string:
			for button in get_tree().get_nodes_in_group("word_button"):
				if button.type == "option":
					button.set_toggle_mode(1)
					
					if sentence_string.has(button.get_text()):
					#	if button.get_text() == option:
						button.set_pressed(1)
						
					else:
						button.set_pressed(0)
		
		
		# activa palabra opcion presionada en respuesta
		for button in get_tree().get_nodes_in_group("word_button"):
			if button.type == "option":
				if button.get_text() == param:
					button.set_pressed(0)
					
					
#		print(param)

	if id_mensaje == "sql_next_trivie":
		_player_sound("notific",5)
		
		for button in get_tree().get_nodes_in_group("word_button"):
			button.queue_free()
			
		sentence_string = []
		array_word_options = []
		title.set_align(0)
		question.show()
		image.show()
		sql_next_trivie()
		get_node("Timer").stop()

		for grid in get_tree().get_nodes_in_group("button_grid_container"):
			grid.active_word = ""


func _on_Timer_timeout():
	get_node("Popup").hide()
	get_node("Timer").stop()
	
	var mensajes = get_tree().get_nodes_in_group("click_awesome")
	for i in mensajes:
		i.click_awesome("sql_next_trivie","")

